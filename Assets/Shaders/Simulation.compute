// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Cells
#pragma kernel Diffuse

struct cell
{
    float2 position;
    float angle;
    float velocity;
};

RWStructuredBuffer<cell> cellsBuffer;
RWTexture2D<float4> TrailTex;
RWTexture2D<float4> DiffusedTex;
shared Texture2D<float4> DrawTex;
Texture2D<float4> MaskTex;

float4 backgroundColor;
float4 cellColor;
float deltaTime;
float time;
uint texResolutionX;
uint texResolutionY;

float4 decayRate;
float4 diffusionRate;
float senseDistance;
float senseAngle;
float turnSpeed;
bool sensing;


float random (float2 pt, float seed) {
    const float a = 12.9898;
    const float b = 78.233;
    const float c = 43758.543123;
    return frac(sin(dot(pt, float2(a, b)) + seed) * c );
}

float senseArea(float2 pos, float angle, float senseAngle) {
    float2 edgeSenseDir = float2(cos(angle + senseAngle), sin(angle + senseAngle));
    
    float sensed = 0;
    float2 centerPos = float2(pos.x + edgeSenseDir.x*senseDistance, pos.y + edgeSenseDir.y*senseDistance);

    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++){
            uint sensePosX = max(0, min(centerPos.x + i, texResolutionX));
            uint sensePosY = max(0, min(centerPos.y + j, texResolutionY));
            sensed += DrawTex[uint2(sensePosX,sensePosY)]
              + MaskTex[uint2(sensePosX,sensePosY)] * 4;
        }
    }
    
    return sensed;
}


[numthreads(64,1,1)]
void Cells (uint3 id : SV_DispatchThreadID)
{
    float newAngle = cellsBuffer[id.x].angle;
    float2 dir = float2(cos(newAngle), sin(newAngle));
    float2 oldPos = cellsBuffer[id.x].position;
    float2 pos = (cellsBuffer[id.x].position + dir*cellsBuffer[id.x].velocity*deltaTime);

    //Square
    // if(pos.x < 1.0 || pos.y < 1.0 || pos.x > texResolutionX - 1.0 || pos.y > texResolutionY - 1.0 || MaskTex[pos].r < 0.5)
    // {
    //     pos = oldPos;
    //     newAngle = random(pos, time)*2*3.14;
    // }


    //Circular
    float2 centerPos = float2(texResolutionX/2, texResolutionY/2);
    float2 relPos = pos - centerPos;

    if((uint)length(relPos) > texResolutionX/2)
    {
        pos = oldPos;
        newAngle = random(pos, time)*2*3.14;
    }

    float senseRight = senseArea(pos, newAngle, -senseAngle);
    float senseForward = senseArea(pos, newAngle, 0);
    float senseLeft = senseArea(pos, newAngle, senseAngle);
    float senseBehind = senseArea(pos, newAngle, 3.14);

    if(senseBehind > 10 && senseForward < 10 && senseLeft < 10 && senseRight < 10)
    {
        newAngle += (random(pos, time)-0.5)*4*deltaTime*turnSpeed;
    }
    else if(senseRight > senseForward && senseRight > senseLeft + 0.001)
    {
        newAngle -= deltaTime*turnSpeed*sensing;
    }
    else if(senseLeft > senseForward && senseLeft > senseRight + 0.001)
    {
        newAngle += deltaTime*turnSpeed*sensing;
    }
    else if(senseForward < senseRight && senseForward < senseLeft)
    {
        newAngle += (random(pos, time)-0.5)*2*deltaTime*turnSpeed;
    }
    

    TrailTex[pos] = cellColor;
    cellsBuffer[id.x].position = pos;
    cellsBuffer[id.x].angle = newAngle;
}

[numthreads(8,8,1)]
void Diffuse (uint3 id : SV_DispatchThreadID)
{
    float4 sumOfTrail = 0;

    for(int i = -1; i <= 1; i++)
    {
        for(int j = -1; j <= 1; j++)
        {   
            uint xPos = max(0, min(id.x+i, texResolutionX));
            uint yPos = max(0, min(id.y+j, texResolutionY));
            sumOfTrail += DrawTex[uint2(xPos, yPos)];
        }
    }

    float4 diffusedPoint = float4(0,0,0,0);
    diffusedPoint += float4(max(sumOfTrail.r/9*diffusionRate.r*deltaTime, DrawTex[id.xy].r), max(sumOfTrail.g/9*diffusionRate.g*deltaTime, DrawTex[id.xy].g), max(sumOfTrail.b/9*diffusionRate.b*deltaTime, DrawTex[id.xy].b), 1);
    DiffusedTex[id.xy] = diffusedPoint - decayRate*deltaTime;
}
